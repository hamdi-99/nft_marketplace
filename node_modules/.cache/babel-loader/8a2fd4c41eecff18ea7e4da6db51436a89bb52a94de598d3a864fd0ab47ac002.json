{"ast":null,"code":"var _jsxFileName = \"/home/hamdiharaketi/Desktop/projects/RTW3-Week7-NFT-Marketplace-main/src/components/NFTpage.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NFTPage(props) {\n  _s();\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n    //create an NFT Token\n    const tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\");\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n      const salePrice = ethers.utils.parseUnits(data.price, 'ether');\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\n      //run the executeSale function\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice\n      });\n      await transaction.wait();\n      alert('You successfully bought the NFT!');\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex ml-20 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.image,\n        alt: \"\",\n        className: \"w-2/5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Name: \", data.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Description: \", data.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"\",\n            children: data.price + \" ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Owner: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.owner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Seller: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.seller\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currAddress == data.owner || currAddress == data.seller ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n            onClick: () => buyNFT(tokenId),\n            children: \"Buy this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-emerald-700\",\n            children: \"You are the owner of this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-green text-center mt-3\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(NFTPage, \"tHfbAfnHJAVQy91bdK1UPtClOpY=\", false, function () {\n  return [useParams];\n});\n_c = NFTPage;\nvar _c;\n$RefreshReg$(_c, \"NFTPage\");","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","NFTPage","props","data","updateData","dataFetched","updateDataFetched","message","updateMessage","currAddress","updateCurrAddress","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","address","abi","tokenURI","listedToken","getListedTokenForId","meta","get","console","log","item","price","seller","owner","image","name","description","buyNFT","salePrice","utils","parseUnits","transaction","executeSale","value","wait","alert","e","params"],"sources":["/home/hamdiharaketi/Desktop/projects/RTW3-Week7-NFT-Marketplace-main/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function NFTPage (props) {\n\n    const [data, updateData] = useState({});\n    const [dataFetched, updateDataFetched] = useState(false);\n    const [message, updateMessage] = useState(\"\");\n    const [currAddress, updateCurrAddress] = useState(\"0x\");\n\n    async function getNFTData(tokenId) {\n        const ethers = require(\"ethers\");\n        //After adding your Hardhat network to your metamask, this code will get providers and signers\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const addr = await signer.getAddress();\n        //Pull the deployed contract instance\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n        //create an NFT Token\n        const tokenURI = await contract.tokenURI(tokenId);\n        const listedToken = await contract.getListedTokenForId(tokenId);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n        console.log(listedToken);\n\n        let item = {\n            price: meta.price,\n            tokenId: tokenId,\n            seller: listedToken.seller,\n            owner: listedToken.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n        }\n        console.log(item);\n        updateData(item);\n        updateDataFetched(true);\n        console.log(\"address\", addr)\n        updateCurrAddress(addr);\n    }\n\n    async function buyNFT(tokenId) {\n        try {\n            const ethers = require(\"ethers\");\n            //After adding your Hardhat network to your metamask, this code will get providers and signers\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n\n            //Pull the deployed contract instance\n            let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n            const salePrice = ethers.utils.parseUnits(data.price, 'ether')\n            updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\")\n            //run the executeSale function\n            let transaction = await contract.executeSale(tokenId, {value:salePrice});\n            await transaction.wait();\n\n            alert('You successfully bought the NFT!');\n            updateMessage(\"\");\n        }\n        catch(e) {\n            alert(\"Upload Error\"+e)\n        }\n    }\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n\n    return(\n        <div style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"flex ml-20 mt-20\">\n                <img src={data.image} alt=\"\" className=\"w-2/5\" />\n                <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n                    <div>\n                        Name: {data.name}\n                    </div>\n                    <div>\n                        Description: {data.description}\n                    </div>\n                    <div>\n                        Price: <span className=\"\">{data.price + \" ETH\"}</span>\n                    </div>\n                    <div>\n                        Owner: <span className=\"text-sm\">{data.owner}</span>\n                    </div>\n                    <div>\n                        Seller: <span className=\"text-sm\">{data.seller}</span>\n                    </div>\n                    <div>\n                        { currAddress == data.owner || currAddress == data.seller ?\n                            <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={() => buyNFT(tokenId)}>Buy this NFT</button>\n                            : <div className=\"text-emerald-700\">You are the owner of this NFT</div>\n                        }\n\n                        <div className=\"text-green text-center mt-3\">{message}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}